/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type CreateDelegationAccount = ContractEventLog<{
  delegationAccount: string;
  owner: string;
  0: string;
  1: string;
}>;
export type GovernanceCallTimelocked = ContractEventLog<{
  selector: string;
  allowedAfterTimestamp: string;
  encodedCall: string;
  0: string;
  1: string;
  2: string;
}>;
export type GovernanceInitialised = ContractEventLog<{
  initialGovernance: string;
  0: string;
}>;
export type GovernedProductionModeEntered = ContractEventLog<{
  governanceSettings: string;
  0: string;
}>;
export type SetLibraryAddress = ContractEventLog<{
  libraryAddress: string;
  0: string;
}>;
export type TimelockedGovernanceCallCanceled = ContractEventLog<{
  selector: string;
  timestamp: string;
  0: string;
  1: string;
}>;
export type TimelockedGovernanceCallExecuted = ContractEventLog<{
  selector: string;
  timestamp: string;
  0: string;
  1: string;
}>;

export interface DelegationAccountManager extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): DelegationAccountManager;
  clone(): DelegationAccountManager;
  methods: {
    accountToDelegationAccount(
      arg0: string
    ): NonPayableTransactionObject<string>;

    cancelGovernanceCall(
      _selector: string | number[]
    ): NonPayableTransactionObject<void>;

    createDelegationAccount(): NonPayableTransactionObject<string>;

    distributions(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    executeGovernanceCall(
      _selector: string | number[]
    ): NonPayableTransactionObject<void>;

    ftsoRewardManagers(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    getAddressUpdater(): NonPayableTransactionObject<string>;

    getDistributions(): NonPayableTransactionObject<string[]>;

    getFtsoRewardManagers(): NonPayableTransactionObject<string[]>;

    governance(): NonPayableTransactionObject<string>;

    governanceSettings(): NonPayableTransactionObject<string>;

    governanceVP(): NonPayableTransactionObject<string>;

    initialise(_initialGovernance: string): NonPayableTransactionObject<void>;

    libraryAddress(): NonPayableTransactionObject<string>;

    productionMode(): NonPayableTransactionObject<boolean>;

    setLibraryAddress(
      _libraryAddress: string
    ): NonPayableTransactionObject<void>;

    switchToProductionMode(): NonPayableTransactionObject<void>;

    timelockedCalls(arg0: string | number[]): NonPayableTransactionObject<{
      allowedAfterTimestamp: string;
      encodedCall: string;
      0: string;
      1: string;
    }>;

    updateContractAddresses(
      _contractNameHashes: (string | number[])[],
      _contractAddresses: string[]
    ): NonPayableTransactionObject<void>;

    wNat(): NonPayableTransactionObject<string>;
  };
  events: {
    CreateDelegationAccount(
      cb?: Callback<CreateDelegationAccount>
    ): EventEmitter;
    CreateDelegationAccount(
      options?: EventOptions,
      cb?: Callback<CreateDelegationAccount>
    ): EventEmitter;

    GovernanceCallTimelocked(
      cb?: Callback<GovernanceCallTimelocked>
    ): EventEmitter;
    GovernanceCallTimelocked(
      options?: EventOptions,
      cb?: Callback<GovernanceCallTimelocked>
    ): EventEmitter;

    GovernanceInitialised(cb?: Callback<GovernanceInitialised>): EventEmitter;
    GovernanceInitialised(
      options?: EventOptions,
      cb?: Callback<GovernanceInitialised>
    ): EventEmitter;

    GovernedProductionModeEntered(
      cb?: Callback<GovernedProductionModeEntered>
    ): EventEmitter;
    GovernedProductionModeEntered(
      options?: EventOptions,
      cb?: Callback<GovernedProductionModeEntered>
    ): EventEmitter;

    SetLibraryAddress(cb?: Callback<SetLibraryAddress>): EventEmitter;
    SetLibraryAddress(
      options?: EventOptions,
      cb?: Callback<SetLibraryAddress>
    ): EventEmitter;

    TimelockedGovernanceCallCanceled(
      cb?: Callback<TimelockedGovernanceCallCanceled>
    ): EventEmitter;
    TimelockedGovernanceCallCanceled(
      options?: EventOptions,
      cb?: Callback<TimelockedGovernanceCallCanceled>
    ): EventEmitter;

    TimelockedGovernanceCallExecuted(
      cb?: Callback<TimelockedGovernanceCallExecuted>
    ): EventEmitter;
    TimelockedGovernanceCallExecuted(
      options?: EventOptions,
      cb?: Callback<TimelockedGovernanceCallExecuted>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "CreateDelegationAccount",
    cb: Callback<CreateDelegationAccount>
  ): void;
  once(
    event: "CreateDelegationAccount",
    options: EventOptions,
    cb: Callback<CreateDelegationAccount>
  ): void;

  once(
    event: "GovernanceCallTimelocked",
    cb: Callback<GovernanceCallTimelocked>
  ): void;
  once(
    event: "GovernanceCallTimelocked",
    options: EventOptions,
    cb: Callback<GovernanceCallTimelocked>
  ): void;

  once(
    event: "GovernanceInitialised",
    cb: Callback<GovernanceInitialised>
  ): void;
  once(
    event: "GovernanceInitialised",
    options: EventOptions,
    cb: Callback<GovernanceInitialised>
  ): void;

  once(
    event: "GovernedProductionModeEntered",
    cb: Callback<GovernedProductionModeEntered>
  ): void;
  once(
    event: "GovernedProductionModeEntered",
    options: EventOptions,
    cb: Callback<GovernedProductionModeEntered>
  ): void;

  once(event: "SetLibraryAddress", cb: Callback<SetLibraryAddress>): void;
  once(
    event: "SetLibraryAddress",
    options: EventOptions,
    cb: Callback<SetLibraryAddress>
  ): void;

  once(
    event: "TimelockedGovernanceCallCanceled",
    cb: Callback<TimelockedGovernanceCallCanceled>
  ): void;
  once(
    event: "TimelockedGovernanceCallCanceled",
    options: EventOptions,
    cb: Callback<TimelockedGovernanceCallCanceled>
  ): void;

  once(
    event: "TimelockedGovernanceCallExecuted",
    cb: Callback<TimelockedGovernanceCallExecuted>
  ): void;
  once(
    event: "TimelockedGovernanceCallExecuted",
    options: EventOptions,
    cb: Callback<TimelockedGovernanceCallExecuted>
  ): void;
}
